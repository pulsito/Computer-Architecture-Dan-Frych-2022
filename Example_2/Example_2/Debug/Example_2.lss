
Example_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000500  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800076  00800076  000005aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ae  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083f  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000899  00000000  00000000  000022e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000466  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cc  00000000  00000000  000031be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003a8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e0       	ldi	r30, 0x00	; 0
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 38       	cpi	r26, 0x86	; 134
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	53 d1       	rcall	.+678    	; 0x300 <main>
  5a:	50 c2       	rjmp	.+1184   	; 0x4fc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <sendhalfbyte>:
﻿#include "lcd.h"

//----------------------------------------
void sendhalfbyte(unsigned char c) //функція відправки половини байта
{
	c<<=4;	//сдвигаємо пів байта до старшої частини
  5e:	82 95       	swap	r24
  60:	80 7f       	andi	r24, 0xF0	; 240
	e1;			//вмикаємо лінію Е
  62:	92 b3       	in	r25, 0x12	; 18
  64:	98 60       	ori	r25, 0x08	; 8
  66:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  68:	95 e8       	ldi	r25, 0x85	; 133
  6a:	9a 95       	dec	r25
  6c:	f1 f7       	brne	.-4      	; 0x6a <sendhalfbyte+0xc>
  6e:	00 00       	nop
	_delay_us(50); 
	PORTD&=0b00001111;	//стираємо дані лише з виходів DB4-DB7, DB40-DB3 не 
  70:	92 b3       	in	r25, 0x12	; 18
  72:	9f 70       	andi	r25, 0x0F	; 15
  74:	92 bb       	out	0x12, r25	; 18
	PORTD|=c;	//записуємо дані на шину
  76:	92 b3       	in	r25, 0x12	; 18
  78:	89 2b       	or	r24, r25
  7a:	82 bb       	out	0x12, r24	; 18
	e0;			//вимикаємо лінію Е, передаємо дані
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	87 7f       	andi	r24, 0xF7	; 247
  80:	82 bb       	out	0x12, r24	; 18
  82:	85 e8       	ldi	r24, 0x85	; 133
  84:	8a 95       	dec	r24
  86:	f1 f7       	brne	.-4      	; 0x84 <sendhalfbyte+0x26>
  88:	00 00       	nop
  8a:	08 95       	ret

0000008c <sendbyte>:
	_delay_us(50);
}
//----------------------------------------
void sendbyte(unsigned char c, unsigned char mode)	//функція відправки цілого байта
{
  8c:	cf 93       	push	r28
  8e:	c8 2f       	mov	r28, r24
	if (mode==0) //вибираємо режим передачі (команда чи дані)
  90:	61 11       	cpse	r22, r1
  92:	04 c0       	rjmp	.+8      	; 0x9c <sendbyte+0x10>
	{
		rs0;
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	82 bb       	out	0x12, r24	; 18
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <sendbyte+0x16>
	}
	else
	{         
		rs1;
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	82 bb       	out	0x12, r24	; 18
	}
	unsigned char hc=0;	//ініціалізація змінної
	hc=c>>4;			//зберігаємо старшу частину байту
	sendhalfbyte(hc);	//передаємо старшу частину байту
  a2:	8c 2f       	mov	r24, r28
  a4:	82 95       	swap	r24
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	da df       	rcall	.-76     	; 0x5e <sendhalfbyte>
	sendhalfbyte(c);	//передаємо молодшу частину байту
  aa:	8c 2f       	mov	r24, r28
  ac:	d8 df       	rcall	.-80     	; 0x5e <sendhalfbyte>
}
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <send_char>:
//----------------------------------------
void send_char(unsigned char c)	//зробимо окрему функцію передечі символу, щоб не писати кожний раз тип передачі 
{
	sendbyte(c,1);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	eb df       	rcall	.-42     	; 0x8c <sendbyte>
  b6:	08 95       	ret

000000b8 <send_str>:
}

//----------------------------------------
void send_str (char str[])  //функція передачі рядка
{	
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	8c 01       	movw	r16, r24
	wchar_t n;				
	for(n=0;str[n]!='\0';n++) //у циклі будемо передавати по одному символу
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <send_str+0x14>
	send_char(str[n]);
  c8:	f4 df       	rcall	.-24     	; 0xb2 <send_char>

//----------------------------------------
void send_str (char str[])  //функція передачі рядка
{	
	wchar_t n;				
	for(n=0;str[n]!='\0';n++) //у циклі будемо передавати по одному символу
  ca:	21 96       	adiw	r28, 0x01	; 1
  cc:	f8 01       	movw	r30, r16
  ce:	ec 0f       	add	r30, r28
  d0:	fd 1f       	adc	r31, r29
  d2:	80 81       	ld	r24, Z
  d4:	81 11       	cpse	r24, r1
  d6:	f8 cf       	rjmp	.-16     	; 0xc8 <send_str+0x10>
	send_char(str[n]);
}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	1f 91       	pop	r17
  de:	0f 91       	pop	r16
  e0:	08 95       	ret

000000e2 <setpos>:
//----------------------------------------
void setpos(unsigned char x, unsigned y)	//функція установки позиції курсора
{
	char adress;
	adress=(0x40*y+x)|0b10000000;	//так як 2 рядок починається з адреси 0х40, то спочатку множимо на у(знайдемо рядок) та додаємо х, після чого перетворимо на команду(set ddram)
  e2:	90 e4       	ldi	r25, 0x40	; 64
  e4:	69 9f       	mul	r22, r25
  e6:	80 0d       	add	r24, r0
  e8:	11 24       	eor	r1, r1
	sendbyte(adress, 0); // передаємо команду
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	ce df       	rcall	.-100    	; 0x8c <sendbyte>
  f0:	08 95       	ret

000000f2 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	8f e2       	ldi	r24, 0x2F	; 47
  f4:	95 e7       	ldi	r25, 0x75	; 117
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_init+0x4>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_init+0xa>
  fc:	00 00       	nop
}
//----------------------------------------
void lcd_init(void)	//функція ініціалізації дисплею
{
	_delay_ms(15); //чекаємо 15 мс
	sendhalfbyte(0b00000011);
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	ae df       	rcall	.-164    	; 0x5e <sendhalfbyte>
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9f e1       	ldi	r25, 0x1F	; 31
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_init+0x14>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_init+0x1a>
 10c:	00 00       	nop
	_delay_ms(4);  //чекаємо 4 мс
	sendhalfbyte(0b00000011);
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	a6 df       	rcall	.-180    	; 0x5e <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	87 ec       	ldi	r24, 0xC7	; 199
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_init+0x24>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_init+0x2a>
 11c:	00 00       	nop
	_delay_us(100); //чекаємо 0.1 мс
	sendhalfbyte(0b00000011);
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	9e df       	rcall	.-196    	; 0x5e <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f ec       	ldi	r24, 0xCF	; 207
 124:	97 e0       	ldi	r25, 0x07	; 7
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x34>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x3a>
 12c:	00 00       	nop
	_delay_ms(1); //чекаємо 1 мс
	sendhalfbyte(0b00000010);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	96 df       	rcall	.-212    	; 0x5e <sendhalfbyte>
 132:	8f ec       	ldi	r24, 0xCF	; 207
 134:	97 e0       	ldi	r25, 0x07	; 7
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_init+0x44>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_init+0x4a>
 13c:	00 00       	nop
	_delay_ms(1); 
	sendbyte(0b00101000, 0); //4біт-режим (DL=0) та 2 рядка в(N=1)
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	88 e2       	ldi	r24, 0x28	; 40
 142:	a4 df       	rcall	.-184    	; 0x8c <sendbyte>
 144:	8f ec       	ldi	r24, 0xCF	; 207
 146:	97 e0       	ldi	r25, 0x07	; 7
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_init+0x56>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_init+0x5c>
 14e:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00001100, 0); //вмикаємо зображення на дисплеї (D=1), курсори не вмикаємо (C=0, B=0)
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	9b df       	rcall	.-202    	; 0x8c <sendbyte>
 156:	8f ec       	ldi	r24, 0xCF	; 207
 158:	97 e0       	ldi	r25, 0x07	; 7
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_init+0x68>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_init+0x6e>
 160:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00000110, 0); //курсор будемо переміщати вправо
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	92 df       	rcall	.-220    	; 0x8c <sendbyte>
 168:	8f ec       	ldi	r24, 0xCF	; 207
 16a:	97 e0       	ldi	r25, 0x07	; 7
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_init+0x7a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_init+0x80>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <clear_lcd>:
	_delay_ms(1);
}
//----------------------------------------
void clear_lcd(void)	//функція передачі команди очищення дисплею
{
	sendbyte(0b00000001, 0);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	88 df       	rcall	.-240    	; 0x8c <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	87 eb       	ldi	r24, 0xB7	; 183
 17e:	9b e0       	ldi	r25, 0x0B	; 11
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <clear_lcd+0xa>
 184:	00 c0       	rjmp	.+0      	; 0x186 <clear_lcd+0x10>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <send_time>:
	_delay_us(1500);
}
//----------------------------------------
void send_time(char sec, char min,char hour)
{
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	18 2f       	mov	r17, r24
 196:	06 2f       	mov	r16, r22
 198:	f4 2e       	mov	r15, r20
	send_char(hour/10+0x30); //Отримуємо першу цифру числа(десятки)
 19a:	cd ec       	ldi	r28, 0xCD	; 205
 19c:	4c 9f       	mul	r20, r28
 19e:	d1 2d       	mov	r29, r1
 1a0:	11 24       	eor	r1, r1
 1a2:	d6 95       	lsr	r29
 1a4:	d6 95       	lsr	r29
 1a6:	d6 95       	lsr	r29
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	8d 0f       	add	r24, r29
 1ac:	82 df       	rcall	.-252    	; 0xb2 <send_char>
	send_char(hour%10+0x30); //Отримуємо другу цифру числа(одиниці)
 1ae:	dd 0f       	add	r29, r29
 1b0:	8d 2f       	mov	r24, r29
 1b2:	88 0f       	add	r24, r24
 1b4:	88 0f       	add	r24, r24
 1b6:	d8 0f       	add	r29, r24
 1b8:	8f 2d       	mov	r24, r15
 1ba:	8d 1b       	sub	r24, r29
 1bc:	80 5d       	subi	r24, 0xD0	; 208
 1be:	79 df       	rcall	.-270    	; 0xb2 <send_char>
	send_char(':');
 1c0:	8a e3       	ldi	r24, 0x3A	; 58
 1c2:	77 df       	rcall	.-274    	; 0xb2 <send_char>
	send_char(min/10+0x30);
 1c4:	0c 9f       	mul	r16, r28
 1c6:	d1 2d       	mov	r29, r1
 1c8:	11 24       	eor	r1, r1
 1ca:	d6 95       	lsr	r29
 1cc:	d6 95       	lsr	r29
 1ce:	d6 95       	lsr	r29
 1d0:	80 e3       	ldi	r24, 0x30	; 48
 1d2:	8d 0f       	add	r24, r29
 1d4:	6e df       	rcall	.-292    	; 0xb2 <send_char>
	send_char(min%10+0x30);
 1d6:	dd 0f       	add	r29, r29
 1d8:	8d 2f       	mov	r24, r29
 1da:	88 0f       	add	r24, r24
 1dc:	88 0f       	add	r24, r24
 1de:	d8 0f       	add	r29, r24
 1e0:	80 2f       	mov	r24, r16
 1e2:	8d 1b       	sub	r24, r29
 1e4:	80 5d       	subi	r24, 0xD0	; 208
 1e6:	65 df       	rcall	.-310    	; 0xb2 <send_char>
	send_char(':');
 1e8:	8a e3       	ldi	r24, 0x3A	; 58
 1ea:	63 df       	rcall	.-314    	; 0xb2 <send_char>
	send_char(sec/10+0x30);
 1ec:	1c 9f       	mul	r17, r28
 1ee:	c1 2d       	mov	r28, r1
 1f0:	11 24       	eor	r1, r1
 1f2:	c6 95       	lsr	r28
 1f4:	c6 95       	lsr	r28
 1f6:	c6 95       	lsr	r28
 1f8:	80 e3       	ldi	r24, 0x30	; 48
 1fa:	8c 0f       	add	r24, r28
 1fc:	5a df       	rcall	.-332    	; 0xb2 <send_char>
	send_char(sec%10+0x30);
 1fe:	cc 0f       	add	r28, r28
 200:	8c 2f       	mov	r24, r28
 202:	88 0f       	add	r24, r24
 204:	88 0f       	add	r24, r24
 206:	c8 0f       	add	r28, r24
 208:	81 2f       	mov	r24, r17
 20a:	8c 1b       	sub	r24, r28
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	51 df       	rcall	.-350    	; 0xb2 <send_char>
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	08 95       	ret

0000021c <send_date>:
//----------------------------------------
void send_date(char sec, char min,char hour,char day,char date,char month,char year)
{
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	18 2f       	mov	r17, r24
 22e:	f6 2e       	mov	r15, r22
 230:	d4 2e       	mov	r13, r20
	
	setpos(0,0);	//Ставимо курсор у початкове положення
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	54 df       	rcall	.-344    	; 0xe2 <setpos>
	send_char(date/10+0x30);	//Отримуємо першу цифру числа(десятки)
 23a:	cd ec       	ldi	r28, 0xCD	; 205
 23c:	0c 9f       	mul	r16, r28
 23e:	d1 2d       	mov	r29, r1
 240:	11 24       	eor	r1, r1
 242:	d6 95       	lsr	r29
 244:	d6 95       	lsr	r29
 246:	d6 95       	lsr	r29
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	8d 0f       	add	r24, r29
 24c:	32 df       	rcall	.-412    	; 0xb2 <send_char>
	send_char(date%10+0x30);	//Отримуємо другу цифру числа(одиниці)
 24e:	dd 0f       	add	r29, r29
 250:	8d 2f       	mov	r24, r29
 252:	88 0f       	add	r24, r24
 254:	88 0f       	add	r24, r24
 256:	d8 0f       	add	r29, r24
 258:	80 2f       	mov	r24, r16
 25a:	8d 1b       	sub	r24, r29
 25c:	80 5d       	subi	r24, 0xD0	; 208
 25e:	29 df       	rcall	.-430    	; 0xb2 <send_char>
	send_char('.');
 260:	8e e2       	ldi	r24, 0x2E	; 46
 262:	27 df       	rcall	.-434    	; 0xb2 <send_char>
	send_char(month/10+0x30);
 264:	ec 9e       	mul	r14, r28
 266:	d1 2d       	mov	r29, r1
 268:	11 24       	eor	r1, r1
 26a:	d6 95       	lsr	r29
 26c:	d6 95       	lsr	r29
 26e:	d6 95       	lsr	r29
 270:	80 e3       	ldi	r24, 0x30	; 48
 272:	8d 0f       	add	r24, r29
 274:	1e df       	rcall	.-452    	; 0xb2 <send_char>
	send_char(month%10+0x30);
 276:	dd 0f       	add	r29, r29
 278:	8d 2f       	mov	r24, r29
 27a:	88 0f       	add	r24, r24
 27c:	88 0f       	add	r24, r24
 27e:	d8 0f       	add	r29, r24
 280:	8e 2d       	mov	r24, r14
 282:	8d 1b       	sub	r24, r29
 284:	80 5d       	subi	r24, 0xD0	; 208
 286:	15 df       	rcall	.-470    	; 0xb2 <send_char>
	send_char('.');
 288:	8e e2       	ldi	r24, 0x2E	; 46
 28a:	13 df       	rcall	.-474    	; 0xb2 <send_char>
	send_char('2');
 28c:	82 e3       	ldi	r24, 0x32	; 50
 28e:	11 df       	rcall	.-478    	; 0xb2 <send_char>
	send_char('0');
 290:	80 e3       	ldi	r24, 0x30	; 48
 292:	0f df       	rcall	.-482    	; 0xb2 <send_char>
	send_char(year/10+0x30);
 294:	cc 9e       	mul	r12, r28
 296:	c1 2d       	mov	r28, r1
 298:	11 24       	eor	r1, r1
 29a:	c6 95       	lsr	r28
 29c:	c6 95       	lsr	r28
 29e:	c6 95       	lsr	r28
 2a0:	80 e3       	ldi	r24, 0x30	; 48
 2a2:	8c 0f       	add	r24, r28
 2a4:	06 df       	rcall	.-500    	; 0xb2 <send_char>
	send_char(year%10+0x30);
 2a6:	cc 0f       	add	r28, r28
 2a8:	8c 2f       	mov	r24, r28
 2aa:	88 0f       	add	r24, r24
 2ac:	88 0f       	add	r24, r24
 2ae:	c8 0f       	add	r28, r24
 2b0:	8c 2d       	mov	r24, r12
 2b2:	8c 1b       	sub	r24, r28
 2b4:	80 5d       	subi	r24, 0xD0	; 208
 2b6:	fd de       	rcall	.-518    	; 0xb2 <send_char>
	setpos(0,1); //Ставимо курсор у початок другого рядка
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	11 df       	rcall	.-478    	; 0xe2 <setpos>
	send_time(sec, min, hour); //передаємо час
 2c0:	4d 2d       	mov	r20, r13
 2c2:	6f 2d       	mov	r22, r15
 2c4:	81 2f       	mov	r24, r17
 2c6:	61 df       	rcall	.-318    	; 0x18a <send_time>
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	df 90       	pop	r13
 2d6:	cf 90       	pop	r12
 2d8:	08 95       	ret

000002da <port_ini>:
unsigned char timer_hour = 0;

//----------------------------------------
void port_ini(void) //Функція ініціалізації портів
{
	PORTD=0x00;	//Ініціалізуємо порт D логічним 0
 2da:	12 ba       	out	0x12, r1	; 18
	DDRD=0xFF;	//Встановляємо порту D режим виходу
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	81 bb       	out	0x11, r24	; 17
	PORTC = 1<<PORTC0; //Ініціалізуємо порт С0 логічною 1
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	85 bb       	out	0x15, r24	; 21
	DDRC |= 0<<PORTC0; //Встановляємо порту D режим входу
 2e4:	84 b3       	in	r24, 0x14	; 20
 2e6:	84 bb       	out	0x14, r24	; 20
 2e8:	08 95       	ret

000002ea <RTC_ConvertFromBinDec>:
	
}

unsigned char RTC_ConvertFromBinDec(unsigned char c) //Функція конвертації двійково-десятичного числа у десятичний
{
	unsigned char ch = ((c>>4)*10+(0b00001111&c)); //здвигаємо вправо і множимо на 10 - отримуємо десятки, потім додаємо одиниці
 2ea:	98 2f       	mov	r25, r24
 2ec:	92 95       	swap	r25
 2ee:	9f 70       	andi	r25, 0x0F	; 15
 2f0:	99 0f       	add	r25, r25
 2f2:	29 2f       	mov	r18, r25
 2f4:	22 0f       	add	r18, r18
 2f6:	22 0f       	add	r18, r18
 2f8:	92 0f       	add	r25, r18
 2fa:	8f 70       	andi	r24, 0x0F	; 15
	return ch;
}
 2fc:	89 0f       	add	r24, r25
 2fe:	08 95       	ret

00000300 <main>:

//----------------------------------------
int main(void)
{
	port_ini(); //Ініціалізуємо порти
 300:	ec df       	rcall	.-40     	; 0x2da <port_ini>
	TWI_Init(); //Ініціалізуємо шину TWI
 302:	ce d0       	rcall	.+412    	; 0x4a0 <TWI_Init>
	lcd_init();  //Ініціалізуємо  дисплей
 304:	f6 de       	rcall	.-532    	; 0xf2 <lcd_init>
	clear_lcd(); //Очищуємо дисплей
 306:	37 df       	rcall	.-402    	; 0x176 <clear_lcd>
	//	TWI_StopCondition();
	
	while(1)
	{
		//Отримуємо час з DS1307
		TWI_SendByteByADDR(0,0b11010000);	//Переходимо за адресою першого регістру (0)
 308:	60 ed       	ldi	r22, 0xD0	; 208
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	dc d0       	rcall	.+440    	; 0x4c6 <TWI_SendByteByADDR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	81 ee       	ldi	r24, 0xE1	; 225
 312:	94 e0       	ldi	r25, 0x04	; 4
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x14>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x1e>
 31e:	00 00       	nop
		_delay_ms(200);
		TWI_Start(); //Відправляємо умову START
 320:	c2 d0       	rcall	.+388    	; 0x4a6 <TWI_Start>
		TWI_SendByte(0b11010001); //Відправляємо біт читання
 322:	81 ed       	ldi	r24, 0xD1	; 209
 324:	c9 d0       	rcall	.+402    	; 0x4b8 <TWI_SendByte>
		sec = TWI_ReadByte();
 326:	dc d0       	rcall	.+440    	; 0x4e0 <TWI_ReadByte>
 328:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <sec>
		min = TWI_ReadByte();
 32c:	d9 d0       	rcall	.+434    	; 0x4e0 <TWI_ReadByte>
 32e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <min>
		hour = TWI_ReadByte();
 332:	d6 d0       	rcall	.+428    	; 0x4e0 <TWI_ReadByte>
 334:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <hour>
		day = TWI_ReadByte();
 338:	d3 d0       	rcall	.+422    	; 0x4e0 <TWI_ReadByte>
 33a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <day>
		date = TWI_ReadByte();
 33e:	d0 d0       	rcall	.+416    	; 0x4e0 <TWI_ReadByte>
 340:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <date>
		month = TWI_ReadByte();
 344:	cd d0       	rcall	.+410    	; 0x4e0 <TWI_ReadByte>
 346:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <month>
		year = TWI_ReadLastByte();
 34a:	d1 d0       	rcall	.+418    	; 0x4ee <TWI_ReadLastByte>
 34c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <year>
		TWI_Stop(); //Отправим условие STOP
 350:	b0 d0       	rcall	.+352    	; 0x4b2 <TWI_Stop>
		//Конвертуємо числа у десятковий формат
		sec = RTC_ConvertFromBinDec(sec); 
 352:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <sec>
 356:	c9 df       	rcall	.-110    	; 0x2ea <RTC_ConvertFromBinDec>
 358:	c8 2f       	mov	r28, r24
 35a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <sec>
		min = RTC_ConvertFromBinDec(min); 
 35e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <min>
 362:	c3 df       	rcall	.-122    	; 0x2ea <RTC_ConvertFromBinDec>
 364:	d8 2f       	mov	r29, r24
 366:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <min>
		hour = RTC_ConvertFromBinDec(hour); 
 36a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <hour>
 36e:	bd df       	rcall	.-134    	; 0x2ea <RTC_ConvertFromBinDec>
 370:	18 2f       	mov	r17, r24
 372:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <hour>
		day = RTC_ConvertFromBinDec(day); 
 376:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <day>
 37a:	b7 df       	rcall	.-146    	; 0x2ea <RTC_ConvertFromBinDec>
 37c:	f8 2e       	mov	r15, r24
 37e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <day>
		year = RTC_ConvertFromBinDec(year); 
 382:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <year>
 386:	b1 df       	rcall	.-158    	; 0x2ea <RTC_ConvertFromBinDec>
 388:	c8 2e       	mov	r12, r24
 38a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <year>
		month = RTC_ConvertFromBinDec(month); 
 38e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <month>
 392:	ab df       	rcall	.-170    	; 0x2ea <RTC_ConvertFromBinDec>
 394:	e8 2e       	mov	r14, r24
 396:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <month>
		date = RTC_ConvertFromBinDec(date); 
 39a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <date>
 39e:	a5 df       	rcall	.-182    	; 0x2ea <RTC_ConvertFromBinDec>
 3a0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <date>
		//Виводимо дату на дисплей
		send_date(sec,min,hour,day,date,month,year);
 3a4:	08 2f       	mov	r16, r24
 3a6:	2f 2d       	mov	r18, r15
 3a8:	41 2f       	mov	r20, r17
 3aa:	6d 2f       	mov	r22, r29
 3ac:	8c 2f       	mov	r24, r28
 3ae:	36 df       	rcall	.-404    	; 0x21c <send_date>
		
		//Обробка натиснення кнопки
		if (!(PINC&1<<PINC0)) //Якщо кнопка натиснута
 3b0:	98 99       	sbic	0x13, 0	; 19
 3b2:	51 c0       	rjmp	.+162    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
		{
			if(!btn_state)	  //та таймер ще не був встановлений
 3b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <btn_state>
 3b8:	81 11       	cpse	r24, r1
 3ba:	44 c0       	rjmp	.+136    	; 0x444 <__DATA_REGION_LENGTH__+0x44>
			{
				btn_state=1;	//Змінюємо статус кнопки
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <btn_state>
				//Виводимо на екран час коли таймер має спрацювати 
				setpos(14,0);	
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	8e e0       	ldi	r24, 0x0E	; 14
 3c8:	8c de       	rcall	.-744    	; 0xe2 <setpos>
				send_str("End at:");
 3ca:	81 e6       	ldi	r24, 0x61	; 97
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	74 de       	rcall	.-792    	; 0xb8 <send_str>
				setpos(14,1);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	8e e0       	ldi	r24, 0x0E	; 14
 3d6:	85 de       	rcall	.-758    	; 0xe2 <setpos>
				sec_end = sec+timer_sec; //Отримуємо кінцевий час
 3d8:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <sec>
 3dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3e0:	89 0f       	add	r24, r25
 3e2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <sec_end>
				min_end = min+timer_min;
 3e6:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <min>
 3ea:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <timer_min>
 3ee:	29 0f       	add	r18, r25
 3f0:	20 93 83 00 	sts	0x0083, r18	; 0x800083 <min_end>
				hour_end = hour+timer_hour;
 3f4:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <hour>
 3f8:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <__data_end>
 3fc:	93 0f       	add	r25, r19
 3fe:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <hour_end>
				if(sec_end>59){min_end++;sec_end-=60;} //Перетворюємо кінцевий час у правильний формат 
 402:	8c 33       	cpi	r24, 0x3C	; 60
 404:	30 f0       	brcs	.+12     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 406:	2f 5f       	subi	r18, 0xFF	; 255
 408:	20 93 83 00 	sts	0x0083, r18	; 0x800083 <min_end>
 40c:	8c 53       	subi	r24, 0x3C	; 60
 40e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <sec_end>
				if(min_end>59){hour_end++;min_end-=60;}	
 412:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <min_end>
 416:	8c 33       	cpi	r24, 0x3C	; 60
 418:	30 f0       	brcs	.+12     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 41a:	9f 5f       	subi	r25, 0xFF	; 255
 41c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <hour_end>
 420:	8c 53       	subi	r24, 0x3C	; 60
 422:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <min_end>
				if(hour_end>23){hour_end-=23;}	
 426:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <hour_end>
 42a:	88 31       	cpi	r24, 0x18	; 24
 42c:	18 f0       	brcs	.+6      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 42e:	87 51       	subi	r24, 0x17	; 23
 430:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <hour_end>
				send_time(sec_end, min_end, hour_end);
 434:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <hour_end>
 438:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <min_end>
 43c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <sec_end>
 440:	a4 de       	rcall	.-696    	; 0x18a <send_time>
 442:	09 c0       	rjmp	.+18     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
			} 
			else //Якщо кнопка натиснута під час роботи таймера, він стає на паузу
			{
				btn_state = 0;
 444:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <btn_state>
				setpos(14,0);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	8e e0       	ldi	r24, 0x0E	; 14
 44e:	49 de       	rcall	.-878    	; 0xe2 <setpos>
				send_str("Stop    ");
 450:	89 e6       	ldi	r24, 0x69	; 105
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	31 de       	rcall	.-926    	; 0xb8 <send_str>
			}	
		}
		if(btn_state)  //Перевіряємо чи не закінчився час
 456:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <btn_state>
 45a:	88 23       	and	r24, r24
 45c:	09 f4       	brne	.+2      	; 0x460 <__stack+0x1>
 45e:	54 cf       	rjmp	.-344    	; 0x308 <main+0x8>
		{
			if(sec>=sec_end && min >= min_end && hour >= hour_end)
 460:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <sec>
 464:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <sec_end>
 468:	98 17       	cp	r25, r24
 46a:	08 f4       	brcc	.+2      	; 0x46e <__stack+0xf>
 46c:	4d cf       	rjmp	.-358    	; 0x308 <main+0x8>
 46e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <min>
 472:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <min_end>
 476:	98 17       	cp	r25, r24
 478:	08 f4       	brcc	.+2      	; 0x47c <__stack+0x1d>
 47a:	46 cf       	rjmp	.-372    	; 0x308 <main+0x8>
 47c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <hour>
 480:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <hour_end>
 484:	98 17       	cp	r25, r24
 486:	08 f4       	brcc	.+2      	; 0x48a <__stack+0x2b>
 488:	3f cf       	rjmp	.-386    	; 0x308 <main+0x8>
			{ 
				//Якщо час вийшов друкуємо на дисплеї повідомлення та повертаємо таймер у початкове положення
				clear_lcd();
 48a:	75 de       	rcall	.-790    	; 0x176 <clear_lcd>
				setpos(14,0);
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	8e e0       	ldi	r24, 0x0E	; 14
 492:	27 de       	rcall	.-946    	; 0xe2 <setpos>
				send_str("END");
 494:	82 e7       	ldi	r24, 0x72	; 114
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0f de       	rcall	.-994    	; 0xb8 <send_str>
				btn_state=0;
 49a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <btn_state>
 49e:	34 cf       	rjmp	.-408    	; 0x308 <main+0x8>

000004a0 <TWI_Init>:
﻿#include "twi.h"

void TWI_Init (void)
{
	TWBR=2;	//Швидкість передачі (при 8 МГц мк = 400 кГц)
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	80 b9       	out	0x00, r24	; 0
 4a4:	08 95       	ret

000004a6 <TWI_Start>:
}


void TWI_Start(void) //Функція початку процедури передачі даних
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Виставляємо біти переривання, старту та активації шини
 4a6:	84 ea       	ldi	r24, 0xA4	; 164
 4a8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));	//Очікуємо встановлення TWIN
 4aa:	06 b6       	in	r0, 0x36	; 54
 4ac:	07 fe       	sbrs	r0, 7
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <TWI_Start+0x4>
}
 4b0:	08 95       	ret

000004b2 <TWI_Stop>:

void TWI_Stop(void) //Функція завершення процедури передачі даних
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN); //Виставляємо біти переривання, стопу та активації шини
 4b2:	84 e9       	ldi	r24, 0x94	; 148
 4b4:	86 bf       	out	0x36, r24	; 54
 4b6:	08 95       	ret

000004b8 <TWI_SendByte>:
}

void TWI_SendByte(unsigned char c) //Функція передачі біту
{
	TWDR = c;		//Записуємо байт в регістр даних
 4b8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);	//Вмикаємо передачу байту
 4ba:	84 e8       	ldi	r24, 0x84	; 132
 4bc:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));	//Очікуємо встановлення TWIN
 4be:	06 b6       	in	r0, 0x36	; 54
 4c0:	07 fe       	sbrs	r0, 7
 4c2:	fd cf       	rjmp	.-6      	; 0x4be <TWI_SendByte+0x6>
}
 4c4:	08 95       	ret

000004c6 <TWI_SendByteByADDR>:

void TWI_SendByteByADDR(unsigned char c,unsigned char addr) //передача байту в шину на пристрій у певний регістр за адресою 
{
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	c8 2f       	mov	r28, r24
 4cc:	d6 2f       	mov	r29, r22
	TWI_Start(); // Відправляємо команду START
 4ce:	eb df       	rcall	.-42     	; 0x4a6 <TWI_Start>
	TWI_SendByte(addr); // Відправляємо до шини адресу пристрою + біт читання-запису
 4d0:	8d 2f       	mov	r24, r29
 4d2:	f2 df       	rcall	.-28     	; 0x4b8 <TWI_SendByte>
	TWI_SendByte(c);// Отправим байт данных
 4d4:	8c 2f       	mov	r24, r28
 4d6:	f0 df       	rcall	.-32     	; 0x4b8 <TWI_SendByte>
	TWI_Stop();	// Відправляємо команду STOP
 4d8:	ec df       	rcall	.-40     	; 0x4b2 <TWI_Stop>
}
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <TWI_ReadByte>:

unsigned char TWI_ReadByte(void) // Функція читання байту
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); // Виставляємо біти переривання, активації шини та підтвердження
 4e0:	84 ec       	ldi	r24, 0xC4	; 196
 4e2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));	//Очікуємо встановлення TWIN
 4e4:	06 b6       	in	r0, 0x36	; 54
 4e6:	07 fe       	sbrs	r0, 7
 4e8:	fd cf       	rjmp	.-6      	; 0x4e4 <TWI_ReadByte+0x4>
	return TWDR;		//Читаємо дані з регістру
 4ea:	83 b1       	in	r24, 0x03	; 3
}
 4ec:	08 95       	ret

000004ee <TWI_ReadLastByte>:

unsigned char TWI_ReadLastByte(void) // Функція читання сотанноього байту
{
	TWCR = (1<<TWINT)|(1<<TWEN);	 // Виставляємо біти переривання та активації шини 
 4ee:	84 e8       	ldi	r24, 0x84	; 132
 4f0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));	//Очікуємо встановлення TWIN
 4f2:	06 b6       	in	r0, 0x36	; 54
 4f4:	07 fe       	sbrs	r0, 7
 4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <TWI_ReadLastByte+0x4>
	return TWDR;	//Читаємо дані з регістру
 4f8:	83 b1       	in	r24, 0x03	; 3
 4fa:	08 95       	ret

000004fc <_exit>:
 4fc:	f8 94       	cli

000004fe <__stop_program>:
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <__stop_program>
